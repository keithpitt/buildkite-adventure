#!/usr/bin/env ruby

require 'open3'
require 'yaml'

class Page
  attr_reader :name, :actions, :death

  def self.find(name)
    # Do we even have a page?
    if Dir.exist?("pages/#{name}")
      # Load the meta data for the page
      metadata = YAML.load_file("pages/#{name}/metadata.yml")
      death = false
      actions = {}

      # Do we even have any metadata?
      if metadata
        if metadata["actions"]
          # Convert the array of actions into a key/value hash for easier lookup
          actions = metadata["actions"].inject({}) do |hash, action|
            hash[action["text"]] = action["goto"]
            hash
          end
        end

        # Store the death...
        death = metadata['death']
      end

      new(name, actions, death)
    else
      raise "No page exists with name `#{name}`"
    end
  end

  def initialize(name, actions, death)
    @name = name
    @actions = actions
    @death = death
  end

  def to_buildkite_pipeline
    {
      "steps" => [
        {
          "block" => ":point_right:",
          "fields" => [ { "select" => "What would you like to do?", "key" => "decision", "options" => @actions.keys } ]
        },
        {
          "command" => "adventure",
          "label" => ":book:"
        }
      ]
    }
  end
end

def determine_page(last_page_name, last_decision)
  if last_page_name && !last_page_name.empty?
    last_page = Page.find(last_page_name)
    goto = last_page.actions[last_decision]
    Page.find(goto)
  else
    Page.find("welcome")
  end
end

# Only set the meta data and upload the build pipeline if we're on CI
if ENV['CI']
  # Get the previous decision and page
  last_page_name, last_page_error, last_page_status = Open3.capture3("buildkite-agent", "meta-data", "get", "page")
  last_decision, last_decision_error, last_decision_status = Open3.capture3("buildkite-agent", "meta-data", "get", "decision")

  # Figure out the current page, either based on the previous decision, or
  # default to the first one.
  page = determine_page(last_page_name, last_decision)

  # Upload any images from the page as artifacts
  artifact_upload_output, artifact_upload_error, artifact_upload_status = Open3.capture3("buildkite-agent", "artifact", "upload", "pages/#{page.name}/*.jpg")

  puts "+++ :book: Adventure..."

  # Show the page of the adventure
  puts `pages/#{page.name}/render.sh`

  if page.death
    exit -1
  end

  # Only continue to the next step if there are any actions to do
  if page.actions && page.actions.length > 0
    # Set meta data to store what page we're on
    Open3.capture3("buildkite-agent", "meta-data", "set", "page", page.name)

    # Upload new steps to BK to continue the adventure
    upload_input = page.to_buildkite_pipeline.to_yaml
    upload_output, upload_error, upload_status = Open3.capture3("buildkite-agent", "pipeline", "upload", stdin_data: upload_input)
    unless upload_status.success?
      puts "--- :warning: Failed to upload the next pipeline"
      puts "This was the pipeline..."
      puts upload_input
      puts ""
      puts "And this was the error..."
      puts upload_error
    end
  end
else
  last_page_name = nil
  last_decision = nil

  while true
    # Figure out the current page, either based on the previous decision, or
    # default to the first one.
    page = determine_page(last_page_name, last_decision)

    # Show the page of the adventure
    puts `pages/#{page.name}/render.sh`

    break if !page.actions || page.actions.empty?

    # Show the options
    puts "\n=> What would you like to do?\n"
    index = 1
    keys = []
    page.actions.each_pair do |key, value|
      puts "#{index}. #{key}"
      keys << key
      index += 1
    end

    # Get the decision based off the number
    decision_index = nil
    while true
      decision_index = gets.chomp.to_i
      if decision_index == 0 || decision_index > keys.length
        puts "Plese enter a number greater than 0, and less than #{keys.length}"
        next
      end
      break
    end

    # Store the last stuff
    last_page_name = page.name
    last_decision = keys[decision_index - 1]
    puts "\n\n\n"
  end
end
